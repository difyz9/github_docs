name: Advanced Cross-Repo Release

on:
  push:
    tags:
      - 'v*'
      - 'release-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string
      target_repo:
        description: 'Target repository'
        required: false
        type: string
      build_type:
        description: 'Build type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - nodejs
          - python
          - go
          - rust
          - static
      include_source:
        description: 'Include source code'
        required: false
        default: false
        type: boolean

env:
  TARGET_REPO: ${{ secrets.TARGET_REPO || github.event.inputs.target_repo }}

jobs:
  detect-project:
    runs-on: ubuntu-latest
    outputs:
      project_type: ${{ steps.detect.outputs.project_type }}
      build_command: ${{ steps.detect.outputs.build_command }}
      output_dir: ${{ steps.detect.outputs.output_dir }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Detect project type
      id: detect
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'auto' }}"
        
        if [ "$BUILD_TYPE" = "auto" ]; then
          if [ -f "package.json" ]; then
            PROJECT_TYPE="nodejs"
            BUILD_CMD="npm run build"
            OUTPUT_DIR="dist"
          elif [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
            PROJECT_TYPE="python"
            BUILD_CMD="python -m build"
            OUTPUT_DIR="dist"
          elif [ -f "go.mod" ]; then
            PROJECT_TYPE="go"
            BUILD_CMD="go build -o build/ ./..."
            OUTPUT_DIR="build"
          elif [ -f "Cargo.toml" ]; then
            PROJECT_TYPE="rust"
            BUILD_CMD="cargo build --release"
            OUTPUT_DIR="target/release"
          else
            PROJECT_TYPE="static"
            BUILD_CMD="echo 'No build required'"
            OUTPUT_DIR="."
          fi
        else
          PROJECT_TYPE="$BUILD_TYPE"
          case "$BUILD_TYPE" in
            nodejs) BUILD_CMD="npm run build"; OUTPUT_DIR="dist" ;;
            python) BUILD_CMD="python -m build"; OUTPUT_DIR="dist" ;;
            go) BUILD_CMD="go build -o build/ ./..."; OUTPUT_DIR="build" ;;
            rust) BUILD_CMD="cargo build --release"; OUTPUT_DIR="target/release" ;;
            static) BUILD_CMD="echo 'No build required'"; OUTPUT_DIR="." ;;
          esac
        fi
        
        echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT
        echo "build_command=$BUILD_CMD" >> $GITHUB_OUTPUT
        echo "output_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
        
        echo "Detected project type: $PROJECT_TYPE"
        echo "Build command: $BUILD_CMD"
        echo "Output directory: $OUTPUT_DIR"

  build-and-release:
    needs: detect-project
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # 设置各种环境
    - name: Setup Node.js
      if: needs.detect-project.outputs.project_type == 'nodejs'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      if: needs.detect-project.outputs.project_type == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Setup Go
      if: needs.detect-project.outputs.project_type == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Setup Rust
      if: needs.detect-project.outputs.project_type == 'rust'
      uses: dtolnay/rust-toolchain@stable
    
    # 安装依赖
    - name: Install dependencies (Node.js)
      if: needs.detect-project.outputs.project_type == 'nodejs'
      run: npm ci
    
    - name: Install dependencies (Python)
      if: needs.detect-project.outputs.project_type == 'python'
      run: |
        python -m pip install --upgrade pip
        python -m pip install build wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f setup.py ]; then pip install -e .; fi
    
    # 执行构建
    - name: Build project
      run: ${{ needs.detect-project.outputs.build_command }}
    
    # 准备发布包
    - name: Prepare release package
      run: |
        # 获取版本号
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # 创建发布目录
        mkdir -p release-package
        
        # 复制构建产物
        OUTPUT_DIR="${{ needs.detect-project.outputs.output_dir }}"
        
        if [ "$OUTPUT_DIR" = "." ]; then
          # 静态文件项目，复制所有文件但排除开发文件
          rsync -av --exclude='.git' --exclude='node_modules' --exclude='__pycache__' \
                    --exclude='.pytest_cache' --exclude='target' --exclude='.env' \
                    --exclude='*.log' ./ release-package/
        else
          if [ -d "$OUTPUT_DIR" ]; then
            cp -r "$OUTPUT_DIR"/* release-package/ 2>/dev/null || cp -r "$OUTPUT_DIR"/. release-package/
          else
            echo "Build output directory not found: $OUTPUT_DIR"
            ls -la
            exit 1
          fi
        fi
        
        # 添加元数据
        cat > release-package/release-info.json << EOF
        {
          "version": "$VERSION",
          "source_repository": "${{ github.repository }}",
          "source_commit": "${{ github.sha }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "project_type": "${{ needs.detect-project.outputs.project_type }}",
          "workflow_run": "${{ github.run_id }}",
          "build_command": "${{ needs.detect-project.outputs.build_command }}"
        }
        EOF
        
        # 如果选择包含源码
        if [ "${{ github.event.inputs.include_source }}" = "true" ]; then
          mkdir -p release-package/source
          git archive HEAD | tar -x -C release-package/source
        fi
        
        # 创建压缩包
        cd release-package
        
        # 创建多种格式的压缩包
        zip -r ../release-$VERSION.zip .
        tar -czf ../release-$VERSION.tar.gz .
        
        # 如果是特定项目类型，创建专用包
        case "${{ needs.detect-project.outputs.project_type }}" in
          nodejs)
            # 创建npm包结构
            tar -czf ../release-$VERSION-npm.tgz .
            ;;
          python)
            # 创建Python wheel包（如果存在）
            if [ -f "../dist/*.whl" ]; then
              cp ../dist/*.whl ../
            fi
            ;;
        esac
        
        cd ..
        
        # 输出信息
        echo "Release package contents:"
        find release-package -type f | head -20
        echo "Archive files:"
        ls -lh release-*.{zip,tar.gz,tgz,whl} 2>/dev/null || ls -lh release-*
    
    # 创建Release
    - name: Create cross-repository release
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        if [ -z "$TARGET_REPO" ]; then
          echo "❌ TARGET_REPO not configured in secrets or inputs"
          exit 1
        fi
        
        echo "🎯 Target repository: $TARGET_REPO"
        echo "📦 Creating release: $VERSION"
        
        # 生成详细的发布说明
        RELEASE_NOTES="## 🚀 Release $VERSION

### 📊 Build Information
| Field | Value |
|-------|-------|
| **Source Repository** | [\`${{ github.repository }}\`](https://github.com/${{ github.repository }}) |
| **Source Commit** | [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |
| **Project Type** | \`${{ needs.detect-project.outputs.project_type }}\` |
| **Build Date** | \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\` |
| **Workflow Run** | [#${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |

### 📥 Available Downloads
| File | Description |
|------|-------------|
| \`release-$VERSION.zip\` | Universal ZIP archive |
| \`release-$VERSION.tar.gz\` | Unix/Linux TAR.GZ archive |"

        # 添加项目特定信息
        case "${{ needs.detect-project.outputs.project_type }}" in
          nodejs)
            RELEASE_NOTES="$RELEASE_NOTES
| \`release-$VERSION-npm.tgz\` | npm package format |"
            ;;
          python)
            if ls release-*.whl 2>/dev/null; then
              RELEASE_NOTES="$RELEASE_NOTES
| \`*.whl\` | Python wheel packages |"
            fi
            ;;
        esac

        RELEASE_NOTES="$RELEASE_NOTES

### ✨ Package Contents
- 🏗️ Built and optimized production files
- 📋 Release metadata (\`release-info.json\`)$([ '${{ github.event.inputs.include_source }}' = 'true' ] && echo '
- 📂 Source code (\`source/\` directory)')

### 🔧 Build Details
- **Build Command**: \`${{ needs.detect-project.outputs.build_command }}\`
- **Output Directory**: \`${{ needs.detect-project.outputs.output_dir }}\`

---
*This release was automatically built and published from [\`${{ github.repository }}\`](https://github.com/${{ github.repository }}) using GitHub Actions.*"
        
        # 收集所有要上传的文件
        UPLOAD_FILES=()
        for file in release-$VERSION.zip release-$VERSION.tar.gz release-$VERSION-npm.tgz release-*.whl; do
          if [ -f "$file" ]; then
            UPLOAD_FILES+=("$file")
          fi
        done
        
        # 创建release
        gh release create "$VERSION" \
          --repo "$TARGET_REPO" \
          --title "🚀 Release $VERSION" \
          --notes "$RELEASE_NOTES" \
          --latest \
          "${UPLOAD_FILES[@]}"
        
        echo "✅ Release created successfully!"
        echo "🔗 View at: https://github.com/$TARGET_REPO/releases/tag/$VERSION"
        
        # 输出摘要
        echo "📊 Release Summary:" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Repository**: [\`$TARGET_REPO\`](https://github.com/$TARGET_REPO)" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Version**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Uploaded**: ${#UPLOAD_FILES[@]}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL**: https://github.com/$TARGET_REPO/releases/tag/$VERSION" >> $GITHUB_STEP_SUMMARY
