# 跨仓库发布配置示例
# 复制此文件为 .env 并修改相应的值

# ===== GitHub 配置 =====
# GitHub Personal Access Token (必需)
# 获取地址: https://github.com/settings/tokens
# 需要的权限: repo (完整仓库权限)
GITHUB_TOKEN=ghp_your_token_here

# 目标仓库 (格式: owner/repo-name)
TARGET_REPO=your-username/your-release-repo

# ===== 项目配置 =====
# 项目类型 (auto, nodejs, python, go, rust, static)
PROJECT_TYPE=auto

# 构建输出目录
BUILD_OUTPUT_DIR=dist

# 自定义构建命令 (可选)
CUSTOM_BUILD_COMMAND="npm run build:prod"

# ===== 发布配置 =====
# 默认版本号
DEFAULT_VERSION=v1.0.0

# 是否包含源代码
INCLUDE_SOURCE_CODE=false

# 是否标记为最新版本
MARK_AS_LATEST=true

# 是否为预发布版本
IS_PRERELEASE=false

# ===== 文件过滤 =====
# 要包含的文件/目录 (逗号分隔)
INCLUDE_FILES=dist,README.md,LICENSE,CHANGELOG.md

# 要排除的文件/目录 (逗号分隔)
EXCLUDE_FILES=node_modules,.git,.env,*.log,coverage,test

# ===== 压缩包配置 =====
# 压缩包前缀
ARCHIVE_PREFIX=release

# 支持的压缩格式 (zip,tar.gz,tar.bz2)
ARCHIVE_FORMATS=zip,tar.gz

# ===== 高级选项 =====
# 自动清理旧的release (保留最近N个)
AUTO_CLEANUP_RELEASES=0

# 生成changelog (从git提交)
GENERATE_CHANGELOG=true

# Slack/Discord 通知 webhook (可选)
NOTIFICATION_WEBHOOK=""

# ===== 示例配置 =====
# 以下是一些常见项目类型的示例配置

# Node.js 项目示例:
# PROJECT_TYPE=nodejs
# BUILD_OUTPUT_DIR=dist
# CUSTOM_BUILD_COMMAND="npm run build"
# INCLUDE_FILES=dist,package.json,README.md

# Python 项目示例:
# PROJECT_TYPE=python
# BUILD_OUTPUT_DIR=dist
# CUSTOM_BUILD_COMMAND="python -m build"
# INCLUDE_FILES=dist,setup.py,README.md,requirements.txt

# Go 项目示例:
# PROJECT_TYPE=go
# BUILD_OUTPUT_DIR=build
# CUSTOM_BUILD_COMMAND="go build -o build/ ./..."
# INCLUDE_FILES=build,README.md,go.mod
